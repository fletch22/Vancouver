
MyList contains a list of hash keys: e.g.: 'abc', 'def', 'ghi'

There are some hashMap entries whose keys are composed thusly: "foo:abc", "foo:def", "foo:ghi"

Each hashmap has a field called "bar" whose value is a number. Like so: "foo:abc bar:someValue fizz:someOtherValue"

So we have a list of hashmap keys. Each list value might have a matching key in a hashmap list. Let's imagine in this case it does. 

First we will make Redis find all the matching objects whose keys contain one of the list values as the last part of a hashmap key. 

In each hashmap found, we will then make Redis find the "bar" field. 

We will make redis sort all the hashmap objects it has found by the value found in the bar field.

Instead of returning the sorted hashmap keys (or even objects) we will return the sorted list of fizz field values.

SORT Mylist BY foo:*->bar GET foo:*->fizz

instanceList

 Jedis jedis = new Jedis("localhost");
         
//[1] Sorting the usernames by the number of ideas and retrieving the user name
System.out.println(jedis.sort("all:users", new SortingParams().by("user:*->num_ideas").get("user:*->name")));
//[User 4, Ribeiro User, Francisco User, Junior User]
 
//[2] Retrieving the name and email
System.out.println(jedis.sort("all:users", new SortingParams().by("user:*->num_ideas").get("user:*->name","user:*->email")));
//[User 4, user@user.com, Ribeiro User, ribeiro@ribeiro.com, Francisco User, francisco@francisco.com, Junior User, junior@junior.com]
 
 
//[3] Retrieve the value of the key being sorted - Special pattern #
System.out.println(jedis.sort("all:users", new SortingParams().by("user:*->num_ideas").get("user:*->name","user:*->email","#")));
//[User 4, user@user.com, user4, Ribeiro User, ribeiro@ribeiro.com, ribeiro, Francisco User, francisco@francisco.com, francisco, Junior User, junior@junior.com, junior]
